  input {
    beats {
    port => 5044
    }
  }
    
    filter {
    if [log_type] == "pdnight_aop_logs" {
    
    # AOP 로그에서 클래스명과 메서드명 추출
    if [parsed][message] =~ /\[DEBUG\] (.+),(.+)/ {
    grok {
    match => {
    "[parsed][message]" => "\[DEBUG\] %{DATA:class_name},%{WORD:method_name}"
    }
    }
    
    # 도메인별 분류
    if [class_name] =~ /auth/ {
    mutate { add_field => { "domain" => "auth" } }
    } else if [class_name] =~ /chat/ {
    mutate { add_field => { "domain" => "chat" } }
    } else if [class_name] =~ /notification/ {
    mutate { add_field => { "domain" => "notification" } }
    } else if [class_name] =~ /post/ {
    mutate { add_field => { "domain" => "post" } }
    } else if [class_name] =~ /user/ {
    mutate { add_field => { "domain" => "user" } }
    } else if [class_name] =~ /promotion/ {
    mutate { add_field => { "domain" => "promotion" } }
    } else {
    mutate { add_field => { "domain" => "other" } }
    }
    
    # 클래스명에서 간단한 이름만 추출
    if [class_name] {
    grok {
    match => {
    "class_name" => "(?:.+\.)?(?<simple_class_name>[^.]+)$"
    }
    }
    }
    }
    
    # 타임스탬프 파싱
    if [parsed][timestamp] {
    date {
    match => [ "[parsed][timestamp]", "yyyy-MM-dd HH:mm:ss" ]
    target => "@timestamp"
    }
    }
    
    # 메타데이터 추가
    mutate {
    add_field => {
    "event_type" => "method_execution"
    "log_source" => "aop"
    "processed_at" => "%{+YYYY-MM-dd HH:mm:ss}"
    }
    }
    }
  }
    
    output {
    elasticsearch {
    hosts => ["elasticsearch:9200"]
    index => "pdnight-aop-logs-%{+YYYY.MM.dd}"
    }
    
    # 디버깅용 출력 (임시로 활성화)
    stdout {
    codec => rubydebug
    }
  }